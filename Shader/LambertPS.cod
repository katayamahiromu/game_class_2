//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CbScene
// {
//
//   row_major float4x4 viewProjection; // Offset:    0 Size:    64 [unused]
//   float4 viewPosition;               // Offset:   64 Size:    16
//   float4 lightDirection;             // Offset:   80 Size:    16
//   float4 ambientLightColor;          // Offset:   96 Size:    16
//
// }
//
// cbuffer CBColorGrading
// {
//
//   float hueShift;                    // Offset:    0 Size:     4
//   float saturation;                  // Offset:    4 Size:     4
//   float brightness;                  // Offset:    8 Size:     4
//   float alpha;                       // Offset:   12 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// diffuseMapSamplerState            sampler      NA          NA             s0      1 
// diffuseMap                        texture  float4          2d             t0      1 
// normalMap                         texture  float4          2d             t1      1 
// toonTex                           texture  float4          2d             t2      1 
// CbScene                           cbuffer      NA          NA            cb0      1 
// CBColorGrading                    cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyz         1     NONE   float   xyz 
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TANGENT                  0   xyz         3     NONE   float   xyz 
// BINORMAL                 0   xyz         4     NONE   float   xyz 
// TEXCOORD                 0   xy          5     NONE   float   xy  
// COLOR                    0   xyzw        6     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[7], immediateIndexed
dcl_constantbuffer CB3[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xy
dcl_input_ps linear v6.xyz
dcl_output o0.xyzw
dcl_temps 8
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.world_position.x; v1.y <- pin.world_position.y; v1.z <- pin.world_position.z; 
//   v2.x <- pin.normal.x; v2.y <- pin.normal.y; v2.z <- pin.normal.z; 
//   v3.x <- pin.tangent.x; v3.y <- pin.tangent.y; v3.z <- pin.tangent.z; 
//   v4.x <- pin.binormal.x; v4.y <- pin.binormal.y; v4.z <- pin.binormal.z; 
//   v5.x <- pin.texcoord.x; v5.y <- pin.texcoord.y; 
//   v6.x <- pin.color.x; v6.y <- pin.color.y; v6.z <- pin.color.z; v6.w <- pin.color.w; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 12 "C:\Users\2230160\Desktop\game_class_2\HLSL\LambertPS.hlsl"
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v5.xyxx, t0.xyzw, s0
mul r0.xyz, r0.xyzx, v6.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z

#line 15
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v5.xyxx, t1.xyzw, s0
itof r2.xyz, l(2, 2, 2, 0)
mul r1.xyz, r1.xyzx, r2.xyzx
itof r2.xyz, l(1, 1, 1, 0)
mov r2.xyz, -r2.xyzx
add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- normal.x; r1.y <- normal.y; r1.z <- normal.z

#line 18
dp3 r0.w, v3.xyzx, v3.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, v3.xyzx
dp3 r0.w, v4.xyzx, v4.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, v4.xyzx
dp3 r0.w, v2.xyzx, v2.xyzx
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, v2.xyzx
mov r5.x, r2.x  // r5.x <- CM._m00
mov r5.y, r3.x  // r5.y <- CM._m10
mov r5.z, r4.x  // r5.z <- CM._m20
mov r6.x, r2.y  // r6.x <- CM._m01
mov r6.y, r3.y  // r6.y <- CM._m11
mov r6.z, r4.y  // r6.z <- CM._m21
mov r4.x, r2.z  // r4.x <- CM._m02
mov r4.y, r3.z  // r4.y <- CM._m12
mov r4.z, r4.z  // r4.z <- CM._m22

#line 26
dp3 r2.x, r1.xyzx, r5.xyzx
dp3 r2.y, r1.xyzx, r6.xyzx
dp3 r2.z, r1.xyzx, r4.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r2.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z

#line 27
mov r2.xyz, -cb0[5].xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx  // r2.x <- L.x; r2.y <- L.y; r2.z <- L.z

#line 28
mov r3.xyz, -v1.xyzx
add r3.xyz, r3.xyzx, cb0[4].xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r3.xyzx  // r3.x <- E.x; r3.y <- E.y; r3.z <- E.z

#line 32
itof r4.xyz, l(1, 1, 1, 0)  // r4.x <- kd.x; r4.y <- kd.y; r4.z <- kd.z

#line 33
itof r5.xyz, l(1, 1, 1, 0)  // r5.x <- ks.x; r5.y <- ks.y; r5.z <- ks.z

#line 34
itof r0.w, l(128)  // r0.w <- shiness

#line 40
nop 
nop 
nop 
mov r1.xyz, r1.xyzx
mov r2.xyz, r2.xyzx
mov r6.xyz, cb0[6].xyzx
mov r4.xyz, r4.xyzx

#line 59 "C:\Users\2230160\Desktop\game_class_2\HLSL\Light.hlsli"
mov r7.xyz, -r2.xyzx
dp3 r1.w, r1.xyzx, r7.xyzx
mul r1.w, r1.w, l(0.500000)
add r1.w, r1.w, l(0.500000)
max r1.w, r1.w, l(0.000000)
min r7.x, r1.w, l(1.000000)  // r7.x <- u

#line 62
mov r7.y, l(0.100000)
sample_indexable(texture2d)(float,float,float,float) r7.xyz, r7.xyxx, t2.xyzw, s0
mov r7.xyz, r7.xyzx  // r7.x <- c.x; r7.y <- c.y; r7.z <- c.z

#line 64
mul r6.xyz, r6.xyzx, r7.xyzx
mul r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- <CalcToonDiffuse return value>.x; r4.y <- <CalcToonDiffuse return value>.y; r4.z <- <CalcToonDiffuse return value>.z

#line 40 "C:\Users\2230160\Desktop\game_class_2\HLSL\LambertPS.hlsl"
mov r4.xyz, r4.xyzx  // r4.x <- directionalDiffuse.x; r4.y <- directionalDiffuse.y; r4.z <- directionalDiffuse.z

#line 41
nop 
mov r1.xyz, r1.xyzx
mov r2.xyz, r2.xyzx
mov r6.xyz, cb0[6].xyzx
mov r3.xyz, r3.xyzx
mov r0.w, r0.w
mov r5.xyz, r5.xyzx

#line 28 "C:\Users\2230160\Desktop\game_class_2\HLSL\Light.hlsli"
dp3 r1.w, r2.xyzx, r1.xyzx
add r1.w, r1.w, r1.w
mov r1.w, -r1.w
mul r1.xyz, r1.wwww, r1.xyzx
add r1.xyz, r2.xyzx, r1.xyzx  // r1.x <- R.x; r1.y <- R.y; r1.z <- R.z

#line 32
dp3 r1.x, r3.xyzx, r1.xyzx
itof r1.y, l(0)
max r1.x, r1.y, r1.x  // r1.x <- d

#line 39
log r1.x, r1.x
mul r0.w, r0.w, r1.x
exp r0.w, r0.w  // r0.w <- d

#line 42
mul r1.xyz, r0.wwww, r6.xyzx
mul r1.xyz, r5.xyzx, r1.xyzx  // r1.x <- <CalcPhongSpecular return value>.x; r1.y <- <CalcPhongSpecular return value>.y; r1.z <- <CalcPhongSpecular return value>.z

#line 41 "C:\Users\2230160\Desktop\game_class_2\HLSL\LambertPS.hlsl"
mov r1.xyz, r1.xyzx  // r1.x <- directionalSpecular.x; r1.y <- directionalSpecular.y; r1.z <- directionalSpecular.z

#line 43
mul r2.xyz, r0.xyzx, r4.xyzx
add r0.xyz, r0.xyzx, r2.xyzx

#line 44
add r0.xyz, r1.xyzx, r0.xyzx

#line 49
nop 
mov r0.xyz, r0.xyzx

#line 7 "C:\Users\2230160\Desktop\game_class_2\HLSL\FilterFunctions.hlsli"
itof r1.x, l(0)  // r1.x <- hsv.x

#line 9
max r0.w, r0.z, r0.y
max r1.z, r0.w, r0.x  // r1.z <- Vmax

#line 10
min r0.w, r0.z, r0.y
min r0.w, r0.w, r0.x  // r0.w <- Vmin

#line 13
mov r0.w, -r0.w
add r0.w, r0.w, r1.z  // r0.w <- delta

#line 16
mov r1.z, r1.z  // r1.z <- hsv.z

#line 19
div r1.w, r0.w, r1.z
itof r2.x, l(0)
ge r2.x, r1.z, r2.x
movc r2.x, r2.x, l(1.000000), l(0)
mul r1.y, r1.w, r2.x  // r1.y <- hsv.y

#line 22
lt r1.w, l(0.000000), r1.y
if_nz r1.w

#line 24
  eq r1.w, r0.x, r1.z
  if_nz r1.w

#line 26
    itof r1.w, l(60)
    mov r2.x, -r0.z
    add r2.x, r0.y, r2.x
    mul r1.w, r1.w, r2.x
    div r1.x, r1.w, r0.w

#line 27
  else 

#line 28
    eq r1.w, r0.y, r1.z
    if_nz r1.w

#line 30
      itof r1.w, l(60)
      mov r2.x, -r0.x
      add r2.x, r0.z, r2.x
      mul r1.w, r1.w, r2.x
      div r1.w, r1.w, r0.w
      itof r2.x, l(120)
      add r1.x, r1.w, r2.x

#line 31
    else 

#line 32
      eq r0.z, r0.z, r1.z
      if_nz r0.z

#line 34
        itof r0.z, l(60)
        mov r0.y, -r0.y
        add r0.x, r0.y, r0.x
        mul r0.x, r0.x, r0.z
        div r0.x, r0.x, r0.w
        itof r0.y, l(240)
        add r1.x, r0.y, r0.x

#line 35
      endif 
    endif 
  endif 

#line 37
  itof r0.x, l(0)
  lt r0.x, r1.x, r0.x
  if_nz r0.x

#line 39
    itof r0.x, l(360)
    add r1.x, r0.x, r1.x

#line 40
  endif 

#line 41
endif 

#line 42
mov r1.x, r1.x  // r1.x <- <RGB2HSV return value>.x
mov r1.y, r1.y  // r1.y <- <RGB2HSV return value>.y
mov r1.z, r1.z  // r1.z <- <RGB2HSV return value>.z

#line 49 "C:\Users\2230160\Desktop\game_class_2\HLSL\LambertPS.hlsl"
mov r1.xyz, r1.xyzx  // r1.x <- color.x; r1.y <- color.y; r1.z <- color.z

#line 52
add r0.x, r1.x, cb3[0].x  // r0.x <- color.x

#line 55
mul r0.y, r1.y, cb3[0].y  // r0.y <- color.y

#line 58
mul r0.z, r1.z, cb3[0].z  // r0.z <- color.z

#line 61
nop 
mov r0.x, r0.x
mov r0.y, r0.y
mov r0.z, r0.z

#line 51 "C:\Users\2230160\Desktop\game_class_2\HLSL\FilterFunctions.hlsli"
itof r1.xyz, l(0, 0, 0, 0)  // r1.x <- rgb.x; r1.y <- rgb.y; r1.z <- rgb.z

#line 52
itof r0.w, l(0)
eq r0.w, r0.w, r0.y
if_nz r0.w

#line 55
  mov r1.z, r0.z
  mov r1.y, r1.z
  mov r1.x, r1.y

#line 56
else 

#line 60
  mov r0.z, r0.z  // r0.z <- Vmax

#line 62
  itof r0.w, l(360)
  mul r1.w, r0.w, r0.x
  mov r2.x, -r1.w
  ge r1.w, r1.w, r2.x
  mov r2.x, -r0.w
  movc r0.w, r1.w, r0.w, r2.x
  div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
  mul r0.x, r0.x, r1.w
  frc r0.x, r0.x
  mul r0.x, r0.x, r0.w  // r0.x <- hsv.x

#line 63
  itof r0.w, l(60)
  div r0.w, r0.x, r0.w
  ftoi r0.w, r0.w
  itof r0.w, r0.w  // r0.w <- Huei

#line 64
  itof r1.w, l(60)
  div r0.x, r0.x, r1.w
  mov r1.w, -r0.w
  add r0.x, r0.x, r1.w  // r0.x <- Huef

#line 65
  mov r1.w, -r0.y
  add r1.w, r1.w, l(1.000000)
  mul r1.w, r0.z, r1.w  // r1.w <- p

#line 66
  mul r2.x, r0.x, r0.y
  mov r2.x, -r2.x
  add r2.x, r2.x, l(1.000000)
  mul r2.x, r0.z, r2.x  // r2.x <- q

#line 67
  itof r2.y, l(1)
  mov r0.x, -r0.x
  add r0.x, r0.x, r2.y
  mul r0.x, r0.x, r0.y
  mov r0.x, -r0.x
  add r0.x, r0.x, l(1.000000)
  mul r0.x, r0.x, r0.z  // r0.x <- t

#line 69
  itof r0.y, l(0)
  eq r0.y, r0.y, r0.w
  if_nz r0.y

#line 71
    mov r1.x, r0.z

#line 72
    mov r1.y, r0.x

#line 73
    mov r1.z, r1.w

#line 74
  else 

#line 75
    itof r0.y, l(1)
    eq r0.y, r0.y, r0.w
    if_nz r0.y

#line 77
      mov r1.x, r2.x

#line 78
      mov r1.y, r0.z

#line 79
      mov r1.z, r1.w

#line 80
    else 

#line 81
      itof r0.y, l(2)
      eq r0.y, r0.y, r0.w
      if_nz r0.y

#line 83
        mov r1.x, r1.w

#line 84
        mov r1.y, r0.z

#line 85
        mov r1.z, r0.x

#line 86
      else 

#line 87
        itof r0.y, l(3)
        eq r0.y, r0.y, r0.w
        if_nz r0.y

#line 89
          mov r1.x, r1.w

#line 90
          mov r1.y, r2.x

#line 91
          mov r1.z, r0.z

#line 92
        else 

#line 93
          itof r0.y, l(4)
          eq r0.y, r0.y, r0.w
          if_nz r0.y

#line 95
            mov r1.x, r0.x

#line 96
            mov r1.y, r1.w

#line 97
            mov r1.z, r0.z

#line 98
          else 

#line 99
            itof r0.x, l(5)
            eq r0.x, r0.x, r0.w
            if_nz r0.x

#line 101
              mov r1.x, r0.z

#line 102
              mov r1.y, r1.w

#line 103
              mov r1.z, r2.x

#line 104
            endif 
          endif 
        endif 
      endif 
    endif 
  endif 

#line 105
endif 

#line 106
mov r1.xyz, r1.xyzx  // r1.x <- <HSV2RGB return value>.x; r1.y <- <HSV2RGB return value>.y; r1.z <- <HSV2RGB return value>.z

#line 61 "C:\Users\2230160\Desktop\game_class_2\HLSL\LambertPS.hlsl"
mov r1.xyz, r1.xyzx  // r1.x <- color.x; r1.y <- color.y; r1.z <- color.z

#line 64
mov r0.x, cb3[0].w  // r0.x <- color.w

#line 65
mov o0.xyz, r1.xyzx
mov o0.w, r0.x
ret 
// Approximately 247 instruction slots used
