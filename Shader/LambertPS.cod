//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CbScene
// {
//
//   row_major float4x4 viewProjection; // Offset:    0 Size:    64 [unused]
//   float4 viewPosition;               // Offset:   64 Size:    16
//   float4 lightDirection;             // Offset:   80 Size:    16
//   float4 ambientLightColor;          // Offset:   96 Size:    16
//
// }
//
// cbuffer CBColorGrading
// {
//
//   float hueShift;                    // Offset:    0 Size:     4
//   float saturation;                  // Offset:    4 Size:     4
//   float brightness;                  // Offset:    8 Size:     4
//   float alpha;                       // Offset:   12 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// diffuseMapSamplerState            sampler      NA          NA             s0      1 
// diffuseMap                        texture  float4          2d             t0      1 
// normalMap                         texture  float4          2d             t1      1 
// toonTex                           texture  float4          2d             t2      1 
// CbScene                           cbuffer      NA          NA            cb0      1 
// CBColorGrading                    cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// POSITION                 0   xyz         1     NONE   float   xyz 
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TANGENT                  0   xyz         3     NONE   float   xyz 
// BINORMAL                 0   xyz         4     NONE   float   xyz 
// TEXCOORD                 0   xy          5     NONE   float   xy  
// COLOR                    0   xyzw        6     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[7], immediateIndexed
dcl_constantbuffer CB3[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xy
dcl_input_ps linear v6.xyz
dcl_output o0.xyzw
dcl_temps 5
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v5.xyxx, t0.xyzw, s0
mul r0.xyz, r0.xyzx, v6.xyzx
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v5.xyxx, t1.xyzw, s0
mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.w, v3.xyzx, v3.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, v3.xyzx
dp3 r0.w, v4.xyzx, v4.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, v4.xyzx
dp3 r0.w, v2.xyzx, v2.xyzx
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, v2.xyzx
mul r3.xyz, r1.yyyy, r3.xyzx
mad r1.xyw, r1.xxxx, r2.xyxz, r3.xyxz
mad r1.xyz, r1.zzzz, r4.xyzx, r1.xywx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
dp3 r0.w, -cb0[5].xyzx, -cb0[5].xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, -cb0[5].xyzx
add r3.xyz, -v1.xyzx, cb0[4].xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r3.xyzx
dp3 r0.w, r1.xyzx, -r2.xyzx
mad_sat r4.x, r0.w, l(0.500000), l(0.500000)
mov r4.y, l(0.100000)
sample_indexable(texture2d)(float,float,float,float) r4.xyz, r4.xyxx, t2.xyzw, s0
mul r4.xyz, r4.xyzx, cb0[6].xyzx
dp3 r0.w, r2.xyzx, r1.xyzx
add r0.w, r0.w, r0.w
mad r1.xyz, r1.xyzx, -r0.wwww, r2.xyzx
dp3 r0.w, r3.xyzx, r1.xyzx
max r0.w, r0.w, l(0.000000)
log r0.w, r0.w
mul r0.w, r0.w, l(128.000000)
exp r0.w, r0.w
mad r0.xyz, r0.xyzx, r4.xyzx, r0.xyzx
mad r0.xyz, cb0[6].xyzx, r0.wwww, r0.xyzx
max r0.w, r0.z, r0.y
max r0.w, r0.w, r0.x
min r1.x, r0.z, r0.y
min r1.x, r0.x, r1.x
add r1.x, r0.w, -r1.x
div r1.y, r1.x, r0.w
ge r1.z, r0.w, l(0.000000)
and r1.z, r1.z, l(0x3f800000)
mul r1.y, r1.z, r1.y
mul r1.z, r1.y, cb3[0].y
mul r2.y, r0.w, cb3[0].z
eq r1.w, r1.z, l(0.000000)
if_nz r1.w
  mov r3.xyz, r2.yyyy
else 
  lt r1.w, l(0.000000), r1.y
  add r4.xyz, -r0.zxyz, r0.yzxy
  mul r4.xyz, r4.xyzx, l(60.000000, 60.000000, 60.000000, 0.000000)
  div r4.xyz, r4.xyzx, r1.xxxx
  eq r0.xyz, r0.xyzx, r0.wwww
  add r4.yz, r4.yyzy, l(0.000000, 120.000000, 240.000000, 0.000000)
  and r0.z, r0.z, r4.z
  movc r0.y, r0.y, r4.y, r0.z
  movc r0.x, r0.x, r4.x, r0.y
  lt r0.y, r0.x, l(0.000000)
  add r0.z, r0.x, l(360.000000)
  movc r0.x, r0.y, r0.z, r0.x
  and r0.x, r0.x, r1.w
  add r0.x, r0.x, cb3[0].x
  mul r0.y, r0.x, l(360.000000)
  ge r0.y, r0.y, -r0.y
  movc r0.yz, r0.yyyy, l(0,360.000000,0.002778,0), l(0,-360.000000,-0.002778,0)
  mul r0.x, r0.z, r0.x
  frc r0.x, r0.x
  mul r0.x, r0.x, r0.y
  mul r0.y, r0.x, l(0.016667)
  round_z r0.y, r0.y
  mad r0.x, r0.x, l(0.016667), -r0.y
  mad r0.z, -r1.y, cb3[0].y, l(1.000000)
  mul r2.z, r0.z, r2.y
  mad r0.z, -r1.z, r0.x, l(1.000000)
  add r0.x, -r0.x, l(1.000000)
  mad r0.x, -r1.z, r0.x, l(1.000000)
  mul r2.xw, r0.xxxz, r2.yyyy
  eq r1.xyzw, r0.yyyy, l(0.000000, 1.000000, 2.000000, 3.000000)
  eq r0.xy, r0.yyyy, l(4.000000, 5.000000, 0.000000, 0.000000)
  and r0.yzw, r2.yyzw, r0.yyyy
  movc r0.xyz, r0.xxxx, r2.xzyx, r0.yzwy
  movc r0.xyz, r1.wwww, r2.zwyz, r0.xyzx
  movc r0.xyz, r1.zzzz, r2.zyxz, r0.xyzx
  movc r0.xyz, r1.yyyy, r2.wyzw, r0.xyzx
  movc r3.xyz, r1.xxxx, r2.yxzy, r0.xyzx
endif 
mov r3.w, cb3[0].w
mov o0.xyzw, r3.xyzw
ret 
// Approximately 97 instruction slots used
