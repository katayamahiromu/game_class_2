//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CBColorGrading
// {
//
//   float hueShift;                    // Offset:    0 Size:     4
//   float saturation;                  // Offset:    4 Size:     4
//   float brightness;                  // Offset:    8 Size:     4
//   float dummy;                       // Offset:   12 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// diffuseMapSamplerState            sampler      NA          NA             s0      1 
// diffuseMap                        texture  float4          2d             t0      1 
// CBColorGrading                    cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB3[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyzw
dcl_output o0.xyzw
dcl_temps 5
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
mul r1.xyzw, r0.xyzw, v2.xyzw
max r0.w, r1.z, r1.y
max r0.w, r0.w, r1.x
min r2.x, r1.z, r1.y
min r2.x, r1.x, r2.x
add r2.x, r0.w, -r2.x
div r2.y, r2.x, r0.w
ge r2.z, r0.w, l(0.000000)
and r2.z, r2.z, l(0x3f800000)
mul r2.y, r2.z, r2.y
mul r2.z, r2.y, cb3[0].y
mul r3.y, r0.w, cb3[0].z
eq r2.w, r2.z, l(0.000000)
if_nz r2.w
  mov r1.xyz, r3.yyyy
else 
  lt r2.w, l(0.000000), r2.y
  mad r0.xyz, r0.yzxy, v2.yzxy, -r1.zxyz
  mul r0.xyz, r0.xyzx, l(60.000000, 60.000000, 60.000000, 0.000000)
  div r0.xyz, r0.xyzx, r2.xxxx
  eq r4.xyz, r1.xyzx, r0.wwww
  add r0.yz, r0.yyzy, l(0.000000, 120.000000, 240.000000, 0.000000)
  and r0.z, r0.z, r4.z
  movc r0.y, r4.y, r0.y, r0.z
  movc r0.x, r4.x, r0.x, r0.y
  lt r0.y, r0.x, l(0.000000)
  add r0.z, r0.x, l(360.000000)
  movc r0.x, r0.y, r0.z, r0.x
  and r0.x, r0.x, r2.w
  add r0.x, r0.x, cb3[0].x
  mul r0.y, r0.x, l(360.000000)
  ge r0.y, r0.y, -r0.y
  movc r0.yz, r0.yyyy, l(0,360.000000,0.002778,0), l(0,-360.000000,-0.002778,0)
  mul r0.x, r0.z, r0.x
  frc r0.x, r0.x
  mul r0.x, r0.x, r0.y
  mul r0.y, r0.x, l(0.016667)
  round_z r0.y, r0.y
  mad r0.x, r0.x, l(0.016667), -r0.y
  mad r0.z, -r2.y, cb3[0].y, l(1.000000)
  mul r3.z, r0.z, r3.y
  mad r0.z, -r2.z, r0.x, l(1.000000)
  add r0.x, -r0.x, l(1.000000)
  mad r0.x, -r2.z, r0.x, l(1.000000)
  mul r3.xw, r0.xxxz, r3.yyyy
  eq r2.xyzw, r0.yyyy, l(0.000000, 1.000000, 2.000000, 3.000000)
  eq r0.xy, r0.yyyy, l(4.000000, 5.000000, 0.000000, 0.000000)
  and r0.yzw, r3.yyzw, r0.yyyy
  movc r0.xyz, r0.xxxx, r3.xzyx, r0.yzwy
  movc r0.xyz, r2.wwww, r3.zwyz, r0.xyzx
  movc r0.xyz, r2.zzzz, r3.zyxz, r0.xyzx
  movc r0.xyz, r2.yyyy, r3.wyzw, r0.xyzx
  movc r1.xyz, r2.xxxx, r3.yxzy, r0.xyzx
endif 
mov o0.xyzw, r1.xyzw
ret 
// Approximately 57 instruction slots used
